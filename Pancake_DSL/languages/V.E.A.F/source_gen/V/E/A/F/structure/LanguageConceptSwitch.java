package V.E.A.F.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Action = 0;
  public static final int Component = 1;
  public static final int ComponentCondition = 2;
  public static final int Condition = 3;
  public static final int Event = 4;
  public static final int MultipleCondition = 5;
  public static final int State = 6;
  public static final int VEAF = 7;
  public static final int Variable = 8;
  public static final int VariableBoolean = 9;
  public static final int VariableBooleanCondition = 10;
  public static final int VariableCondition = 11;
  public static final int VariableInteger = 12;
  public static final int VariableIntegerCondition = 13;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL);
    builder.put(0x1900d2d6a86e7681L, Action);
    builder.put(0x27d147c85ff6c4d2L, Component);
    builder.put(0x31e1baf5f2d07866L, ComponentCondition);
    builder.put(0x31e1baf5f2d05c92L, Condition);
    builder.put(0x5afc605aa5c83e8fL, Event);
    builder.put(0x31e1baf5f2d09e26L, MultipleCondition);
    builder.put(0x27d147c85ff6ccd9L, State);
    builder.put(0x27d147c85ff679c8L, VEAF);
    builder.put(0x5afc605aa5c82241L, Variable);
    builder.put(0x5053c2963cc9b643L, VariableBoolean);
    builder.put(0x5053c2963ccb5644L, VariableBooleanCondition);
    builder.put(0x31e1baf5f2d06470L, VariableCondition);
    builder.put(0x5053c2963cc9c00fL, VariableInteger);
    builder.put(0x5053c2963ccb4d96L, VariableIntegerCondition);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
