package V.E.A.F.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import V.E.A.F.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.ActuatorAction:
        return new ActuatorAction_TextGen();
      case LanguageConceptSwitch.AssigneSensorAction:
        return new AssigneSensorAction_TextGen();
      case LanguageConceptSwitch.AssigneVariableBooleanAction:
        return new AssigneVariableBooleanAction_TextGen();
      case LanguageConceptSwitch.AssigneVariableIntegerAction:
        return new AssigneVariableIntegerAction_TextGen();
      case LanguageConceptSwitch.Component:
        return new Component_TextGen();
      case LanguageConceptSwitch.MultipleCondition:
        return new MultipleCondition_TextGen();
      case LanguageConceptSwitch.PauseAction:
        return new PauseAction_TextGen();
      case LanguageConceptSwitch.SensorCondition:
        return new SensorCondition_TextGen();
      case LanguageConceptSwitch.State:
        return new State_TextGen();
      case LanguageConceptSwitch.Transition:
        return new Transition_TextGen();
      case LanguageConceptSwitch.UnaryCondition:
        return new UnaryCondition_TextGen();
      case LanguageConceptSwitch.VEAF:
        return new VEAF_TextGen();
      case LanguageConceptSwitch.VariableBoolean:
        return new VariableBoolean_TextGen();
      case LanguageConceptSwitch.VariableBooleanAction:
        return new VariableBooleanAction_TextGen();
      case LanguageConceptSwitch.VariableBooleanCondition:
        return new VariableBooleanCondition_TextGen();
      case LanguageConceptSwitch.VariableInteger:
        return new VariableInteger_TextGen();
      case LanguageConceptSwitch.VariableIntegerAction:
        return new VariableIntegerAction_TextGen();
      case LanguageConceptSwitch.VariableIntegerCondition:
        return new VariableIntegerCondition_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.VEAF$mX)) {
        String fname = getFileName_VEAF(root);
        String ext = getFileExtension_VEAF(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_VEAF(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL);
  }
  private static String getFileExtension_VEAF(SNode node) {
    return "ino";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept VEAF$mX = MetaAdapterFactory.getConcept(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL, 0x27d147c85ff679c8L, "V.E.A.F.structure.VEAF");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
