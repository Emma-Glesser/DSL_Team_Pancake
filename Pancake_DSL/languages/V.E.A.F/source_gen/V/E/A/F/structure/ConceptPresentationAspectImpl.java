package V.E.A.F.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Actuator;
  private ConceptPresentation props_ActuatorAction;
  private ConceptPresentation props_AssigneSensorAction;
  private ConceptPresentation props_AssigneValueAction;
  private ConceptPresentation props_AssigneVariableAction;
  private ConceptPresentation props_AssigneVariableBooleanAction;
  private ConceptPresentation props_AssigneVariableIntegerAction;
  private ConceptPresentation props_Component;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_MultipleCondition;
  private ConceptPresentation props_PauseAction;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_SensorCondition;
  private ConceptPresentation props_State;
  private ConceptPresentation props_Transition;
  private ConceptPresentation props_UnaryCondition;
  private ConceptPresentation props_VEAF;
  private ConceptPresentation props_Variable;
  private ConceptPresentation props_VariableAction;
  private ConceptPresentation props_VariableBoolean;
  private ConceptPresentation props_VariableBooleanAction;
  private ConceptPresentation props_VariableBooleanCondition;
  private ConceptPresentation props_VariableCondition;
  private ConceptPresentation props_VariableInteger;
  private ConceptPresentation props_VariableIntegerAction;
  private ConceptPresentation props_VariableIntegerCondition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Actuator:
        if (props_Actuator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actuator = cpb.create();
        }
        return props_Actuator;
      case LanguageConceptSwitch.ActuatorAction:
        if (props_ActuatorAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL, 0x7ae59a00bc6213a1L, 0x7ae59a00bc621bfaL, "actuator", "", "");
          props_ActuatorAction = cpb.create();
        }
        return props_ActuatorAction;
      case LanguageConceptSwitch.AssigneSensorAction:
        if (props_AssigneSensorAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AssigneSensorAction");
          props_AssigneSensorAction = cpb.create();
        }
        return props_AssigneSensorAction;
      case LanguageConceptSwitch.AssigneValueAction:
        if (props_AssigneValueAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AssigneValueAction = cpb.create();
        }
        return props_AssigneValueAction;
      case LanguageConceptSwitch.AssigneVariableAction:
        if (props_AssigneVariableAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AssigneVariableAction = cpb.create();
        }
        return props_AssigneVariableAction;
      case LanguageConceptSwitch.AssigneVariableBooleanAction:
        if (props_AssigneVariableBooleanAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AssigneVariableBooleanAction");
          props_AssigneVariableBooleanAction = cpb.create();
        }
        return props_AssigneVariableBooleanAction;
      case LanguageConceptSwitch.AssigneVariableIntegerAction:
        if (props_AssigneVariableIntegerAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AssigneVariableIntegerAction");
          props_AssigneVariableIntegerAction = cpb.create();
        }
        return props_AssigneVariableIntegerAction;
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.MultipleCondition:
        if (props_MultipleCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MultipleCondition");
          props_MultipleCondition = cpb.create();
        }
        return props_MultipleCondition;
      case LanguageConceptSwitch.PauseAction:
        if (props_PauseAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PauseAction");
          props_PauseAction = cpb.create();
        }
        return props_PauseAction;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.SensorCondition:
        if (props_SensorCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL, 0x31e1baf5f2d07866L, 0x31e1baf5f2d07c32L, "sensor", "", "");
          props_SensorCondition = cpb.create();
        }
        return props_SensorCondition;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.Transition:
        if (props_Transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event");
          props_Transition = cpb.create();
        }
        return props_Transition;
      case LanguageConceptSwitch.UnaryCondition:
        if (props_UnaryCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UnaryCondition");
          props_UnaryCondition = cpb.create();
        }
        return props_UnaryCondition;
      case LanguageConceptSwitch.VEAF:
        if (props_VEAF == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VEAF = cpb.create();
        }
        return props_VEAF;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Variable = cpb.create();
        }
        return props_Variable;
      case LanguageConceptSwitch.VariableAction:
        if (props_VariableAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_VariableAction = cpb.create();
        }
        return props_VariableAction;
      case LanguageConceptSwitch.VariableBoolean:
        if (props_VariableBoolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VariableBoolean = cpb.create();
        }
        return props_VariableBoolean;
      case LanguageConceptSwitch.VariableBooleanAction:
        if (props_VariableBooleanAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL, 0x7ae59a00bc6230bcL, 0x7ae59a00bc62363bL, "variable", "", "");
          props_VariableBooleanAction = cpb.create();
        }
        return props_VariableBooleanAction;
      case LanguageConceptSwitch.VariableBooleanCondition:
        if (props_VariableBooleanCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL, 0x5053c2963ccb5644L, 0x5053c2963ccb7abeL, "variable", "", "");
          props_VariableBooleanCondition = cpb.create();
        }
        return props_VariableBooleanCondition;
      case LanguageConceptSwitch.VariableCondition:
        if (props_VariableCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_VariableCondition = cpb.create();
        }
        return props_VariableCondition;
      case LanguageConceptSwitch.VariableInteger:
        if (props_VariableInteger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VariableInteger = cpb.create();
        }
        return props_VariableInteger;
      case LanguageConceptSwitch.VariableIntegerAction:
        if (props_VariableIntegerAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL, 0x7ae59a00bc623b51L, 0x7ae59a00bc62423cL, "variable", "", "");
          props_VariableIntegerAction = cpb.create();
        }
        return props_VariableIntegerAction;
      case LanguageConceptSwitch.VariableIntegerCondition:
        if (props_VariableIntegerCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf152af7d92d2462fL, 0xacb4a6902db66b9dL, 0x5053c2963ccb4d96L, 0x5053c2963ccb7f52L, "variable", "", "");
          props_VariableIntegerCondition = cpb.create();
        }
        return props_VariableIntegerCondition;
    }
    return null;
  }
}
